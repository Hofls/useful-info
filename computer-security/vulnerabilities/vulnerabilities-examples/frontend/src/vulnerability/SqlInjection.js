import React, { Component } from "react";
import './Vulnerability.css';


class SqlInjection extends Component {
    constructor(props) {
        super(props);
        this.state = { apiResponse: ""};

        this.getAccount = this.getAccount.bind(this);
    }

    getAccount(account) {
        fetch(`http://localhost:8080/account/${account}`)
            .then(res => res.text())
            .then(res => this.setState({ apiResponse: res }))
            .catch(err => err);
    }


    render() {
        let explanation = `
        SQL Injection.
        Vulnerability happens when data goes directly from user to the SQL query.
        Malicious actor can execute any SQL query. e.g. - get access to any info in the database, drop tables, modify data etc.
        Fix: input sanitization (most modern frameworks are already doing it).
        `;
        return (
            <div className="App">
                <div className="explanation">
                    {explanation}
                </div>
                <div>
                    Alex id is 21321. Press button with text "21321" to get account info by id. Every other button is SQL injection.
                </div>
                <span> Account info: </span>
                <span>{this.state.apiResponse}</span>

                <div>
                    <button onClick={() => this.getAccount("21321")}>21321</button>
                </div>
                <div>
                    <button onClick={() => this.getAccount("1 or 1=1")}>1 or 1=1</button>
                </div>
                <div>
                    <button onClick={() => this.getAccount("1 %3B UPDATE account SET balance = 999999 %3B ")}>1; UPDATE account SET balance = 999999;</button>
                </div>
                <div>
                    <button onClick={() => this.getAccount("1 %3B DROP TABLE account %3B ")}>1; DROP TABLE account;</button>
                </div>
            </div>
        );
    }
}

export default SqlInjection;
