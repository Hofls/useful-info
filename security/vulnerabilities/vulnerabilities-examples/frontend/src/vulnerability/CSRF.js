import React, { Component } from "react";
import './Vulnerability.css';


class CSRF extends Component {
    constructor(props) {
        super(props);
        this.state = { apiResponse: ""};

        this.setPassword = this.setPassword.bind(this);
        this.getPassword = this.getPassword.bind(this);
    }

    setPassword() {
        fetch('http://localhost:8080/profile/82724/password', {
            method: 'PUT',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            },
            body: "new-h4ck3d-password"
        })
            .then(res => res.text())
            .then(res => this.setState({ apiResponse: res }))
            .catch(err => err);

    }

    getPassword() {
        fetch(`http://localhost:8080/profile/82724/password`)
            .then(res => res.text())
            .then(res => this.setState({ apiResponse: res }))
            .catch(err => err);
    }

    componentDidMount() {
        this.getPassword();
    }


    render() {
        let explanation = `
        Cross-Site Request Forgery (CSRF)
        Bad actor can send requests from users browser to legitimate websites, when user visits malicious website (or by tricking user into clicking link)
        For backend such request will not look suspicious (because cookies are here, IP is the same, etc)
        Fix 1: Server should require that POST requests include a user-specific site-generated secret (token). 
        The secret would be supplied by the server when sending the web form used to make transfers.
        Fix 2: 'SameSite' attribute in cookies
        PS if same-origin-policy is active, then such request can be send with image tag (GET) or form tag (POST)
        `;
        return (
            <div className="App">
                <div className="explanation">
                    {explanation}
                </div>
                <span> Current password: </span>
                <span>{this.state.apiResponse}</span>

                <div>
                    Any site can ask browser to send such a request:
                </div>
                <div>
                    <button onClick={this.setPassword}>password change request</button>
                </div>

            </div>
        );
    }
}

export default CSRF;
