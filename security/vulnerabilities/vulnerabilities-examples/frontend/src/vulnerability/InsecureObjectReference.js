import React, { Component } from "react";
import './Vulnerability.css';


class InsecureObjectReference extends Component {

    constructor(props) {
        super(props);
        this.state = {apiResponse: ""};

        this.getMessage = this.getMessage.bind(this);
    }

    getMessage(index) {
        fetch(`http://localhost:8080/secret-vault/${index}`)
            .then(res => res.text())
            .then(res => this.setState({ apiResponse: res }))
            .catch(err => this.setState({ apiResponse: err }));
    }

    render() {
        let explanation = `
        Insecure Direct Object References.
        Occurs when system does not performs authorization checks. Blindly accepts IDs received from user.
        Malicious actor can send requests with any ids, thus getting access to restricted data or perform undesirable actions.
        Fix: implement backend-side authorization.
        `;
        return (
            <div className="App">
                <div className="explanation">
                    {explanation}
                </div>
                <span> Secret value: </span>
                <span> {this.state.apiResponse} </span>
                <div>
                    <button onClick={() => {this.getMessage(1)}}>Get your secret value</button>
                </div>
                <div>
                    <button onClick={() => {this.getMessage(666)}}>Get secret value of other user (vulnerability)</button>
                </div>
                <div>
                    <button onClick={() => {this.getMessage(777)}}>Try to get value of other user (with added auth)</button>
                </div>
            </div>

        );
    }
}

export default InsecureObjectReference;
